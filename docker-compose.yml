version: '2'
services:

# Docker-Compose file to run the TQ website in production
#
# Security consideration: using port: mappings will expose the ports to the world, using expose: makes
# them only accessible in the local Docker network

  # Database (Postgres)
  postgres:
    image: postgres:12
    container_name: tq-postgres
    environment:
      POSTGRES_USER: ${TQ_DB_USER}
      POSTGRES_PASSWORD: ${TQ_DB_PASSWORD}
      POSTGRES_DB: ${TQ_DB_NAME}
    volumes:
      - "../data-postgres:/var/lib/postgresql/data"
    expose:
      - "5432"
    restart: always

  # Cache and message broker for celery (handles background tasks)
  redis:
    container_name: tq-redis
    image: redis:6.0-alpine
    restart: always

  # Django (serving with gunicorn)
  django:
    container_name: tq-django
    build:
      context: .
      dockerfile: Dockerfile
    image: tq_website_django # give this built image a name to use it below
    env_file:
      - .env
    user: root # TODO not good :/
    volumes:
      - .:/app/
    command: gunicorn -c file:/app/configurations/gunicorn.py tq_website.wsgi:application
    links:
      - postgres
      - redis
    restart: always

  # Webserver
  nginx:
    container_name: tq-nginx
    image: nginx:mainline-alpine
    volumes:
      - ./configurations/nginx-ssl.conf:/etc/nginx/conf.d/tq_website.template
      - ./collected_static:/app/collected_static
      - ./media:/app/media
      - ./maintenance.conf:/app/maintenance.conf
      - /etc/letsencrypt:/etc/letsencrypt
    command: nginx -g 'daemon off;' -c '/etc/nginx/conf.d/tq_website.template'
    environment:
      - NGINX_HOST=${TQ_NGINX_HOST}
      - NGINX_PORT=${TQ_NGINX_PORT}
    ports:
      - "${TQ_NGINX_PORT}:80"
      - "${TQ_SSL_PORT}:443"
    links:
      - django
    restart: always

  # Celery Beat
  beat:
    container_name: tq-beat
    image: tq_website_django
    env_file:
      - .env
    working_dir: /app/
    volumes:
      - .:/app/
    command: celery -A tq_website beat -l info --pidfile="/tmp/celerybeat.pid" -S django
    links:
      - postgres
      - redis
    depends_on:
      - django # ensure the image is built before running this container
    restart: always

  worker:
    container_name: tq-worker
    depends_on:
      - django # ensure the image is built before running this container
    image: tq_website_django
    env_file:
      - .env
    working_dir: /app/
    environment:
      C_FORCE_ROOT: 1
    volumes:
      - .:/app/
    command: celery -A tq_website worker -l info
    links:
      - postgres
      - redis
    restart: always
