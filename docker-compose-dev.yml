version: '2'

# This Compose file can be used in a development environment.
#
# Run this: docker-compose -f docker-compose-dev.yml down && docker-compose -f docker-compose-dev.yml up -d --build
# Restore DB dump: docker exec -i tq_website_db_1 mysql -u root -p"ROOTPASSWORD" tq_website < dump.sql

services:
  # Database (MySQL)
  db:
    image: mysql:8
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: ${TQ_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: tq_website
    command: [--default-authentication-plugin=mysql_native_password]
    volumes:
      - "db-volume:/var/lib/mysql"
    ports:
      - "${TQ_DB_PORT}:3306"
    restart: always

  # Database (Postgres, in the future maybe)
#  postgres:
#    image: postgres
#    environment:
#      POSTGRES_USER: ${TQ_DB_USER}
#      POSTGRES_PASSWORD: ${TQ_DB_PASSWORD}
#      POSTGRES_DB: tq_website
#    ports:
#     - 5432:5432
#   restart: always

  # Cache
  redis:
    image: redis:3.2-alpine
    restart: always

  # Django (serving with debug webserver)
  django:
    build:
      context: .
      dockerfile: configurations/dockerfile-new
    image: tq_website_django # give this built image a name to use it below
    env_file:
      - .env
    user: root
    volumes:
      - .:/webapps/tq_website:Z
    command: python3 manage.py runserver 0.0.0.0:8000
    ports:
      - "${TQ_DJANGO_PORT}:8000"
    links:
      - db
      - redis
    restart: always
    depends_on:
      - db

volumes:
  db-volume: # Let Docker generate a place for this, doesn't matter for development